<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
		<!-- Activates various annotations to be detected in bean classes -->
	<context:annotation-config />
		
	<!-- Configures the annotation-driven Spring MVC Controller programming model.
	Note that, with Spring 3.0, this tag works in Servlet MVC only!  -->
	<default-servlet-handler/>
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<beans:bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<beans:property name="basename" value="classpath:messages" />
		<beans:property name="defaultEncoding" value="UTF-8" />
	</beans:bean>



	
	<beans:bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView"/>
    </beans:bean>
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory 
	Note: When chaining ViewResolvers, a InternalResourceViewResolver always needs to be last, 
	as it will attempt to resolve any view name, no matter whether the underlying resource actually exists. -->
 	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />		
	</beans:bean> 
		
	    <beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
        <beans:property name="definitions">
            <beans:list>
                <beans:value>/WEB-INF/spring/appServlet/tiles.xml</beans:value>
            </beans:list>
        </beans:property>
    </beans:bean>
	
	
	<beans:bean class="org.springframework.context.support.ResourceBundleMessageSource">
	<beans:property name="basenames">
	<beans:list>
	<beans:value>messages</beans:value>
	</beans:list>
	</beans:property>
	</beans:bean>
    
    <!-- Scans the classpath for annotated components that will be auto-registered as Spring beans.
	 For example @Controller and @Service. Make sure to set the correct base-package-->
     <context:component-scan base-package="com.high.app.controller" /> 
     
     <beans:bean id="context" class="org.springframework.context.support.ClassPathXmlApplicationContext">
		<beans:constructor-arg>
			<beans:value>DaoFactory.xml</beans:value>
		</beans:constructor-arg>
	</beans:bean>
     
	
</beans:beans>
